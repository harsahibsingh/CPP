/*Object slicing happens when a derived class object is assigned to a base class object, 
additional attributes of a derived class object are sliced off to form the base class object.*/

#include <iostream>
using namespace std;

class Base
{
protected://if made private then cant be inherited in Derived class
	int i;
public:
	Base(int a)	 { i = a; }
	virtual void display()
	{ cout << "I am Base class object, i = " << i << endl; }
};

class Derived : public Base
{
	int j;
public:
	Derived(int a, int b) : Base(a) { j = b; }
	virtual void display()
	{ cout << "I am Derived class object, i = "
		<< i << ", j = " << j << endl; }
};

// Global method, Base class object is passed by value
void somefunc (Base obj)
{
	obj.display();
}

int main()
{
	Base b(33);
	Derived d(45, 54);
	somefunc(b);
	somefunc(d); // Object Slicing, the member j of d is sliced off
	return 0;
}

/*int main()//either use above or this main, with this main somefunc() not required
{
  Base b(33);
	Derived d(45, 54);
	b.display();
	Base b1=d;//cause object slicing
	b1.display();
	Base &b2=d;//using reference remove object slicing
	b2.display();
  }*/

/*Object slicing doesnâ€™t occur when pointers or references to objects are passed as function arguments 
since a pointer or reference of any type takes same amount of memory. */

// rest of code is similar to above
void somefunc (Base &obj)
{
	obj.display();
}		
// rest of code is similar to above





