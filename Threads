#include <iostream>
#include<thread>
#include<future>
#include<string>

using namespace std;

void func1()
{
    cout<<"Function 1"<<endl;
}

void func2(string s)
{
    cout<<s<<endl;
}

void func3(int n)
{
    cout<<"Value of integer is:"<<n<<endl;
}

int func4(int n)
{
    return n+1;
}

void func5(string &s)//pass by reference
{
    s="xyz";
}

void func6(string &&s)
{
cout<<"move execution: "<<s<<endl;
}

class A
{
public:
void display()
{
cout<<"Class A"<<endl;
}
};


int main()
{
    
    thread t1{func1};
    
    thread t2{func2,"Function 2"};
    
    thread t3{func3, 3};
    
    int val{};
    auto future=std::async(func4,4);
    val=future.get();
    cout<<"val: "<<val<<endl;
    
    
    {
    std::string s{"abd"};
    cout<<"Before String: "<<s<<endl;
    thread t5{func5,std::ref(s)};
    t5.join();
    cout<<"After String: "<<s<<endl;
    }
    
    {
    
    std::string s{"abcde"};
    cout<<"Before move: "<<s<<endl;
    thread t6{func6,std::move(s)};
    t6.join();
    cout<<"After move: "<<s<<endl;
    }
    
    {
    A obj;
    thread t7{&A::display,&obj};
    t7.join();
    }
    
    {
    thread t8{[](){cout<<"Hello Lambda"<<endl;}};
    t8.join();
    }
    
    {
    std::string s{"Lambda Input"};
    thread t9{[&s](){cout<<s<<endl;}};
    t9.join();
    }
    t1.join();
    t2.join();
    t3.join();

    return 0;
}
