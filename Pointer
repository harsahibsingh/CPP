#include <iostream>

using namespace std;

struct Rectangle
{
    int length;
    int breadth;
};


int main()
{
    int a=10;
    int *ptr;
    
    ptr=&a; //pointer to a variable
    
    cout<<" Value: "<<a<<" "<<*ptr<<endl;
    cout<<"Address: "<<&a<<" "<<ptr<<endl;
    
    int A[5]={1,2,3,4,5};//this array is created in stack
    int *ptr2;
    
    ptr2=A;//pointer to array --> no need to give impersant as array name is itself starting addesss of the array
    
    //if u want to use impersant then: 
    //ptr2=&A[0];
    
    //ptr=&A is invalid syntax --> compiler may or may not give any warning but might get unwanted output
    
    //Note: pointer ptr2 acts as name of the array
    
    for(int i=0;i<5;i++)
    {
        cout<<ptr2[i]<<" ";//printing array elements using pointer
    }
    cout<<endl;
    
    //now creating an array in heap using pointer
    cout<<"Arrray in Heap:"<<endl;
    int *ptr3;
    ptr3= new int[5];//array of 5 integers automatically converted to int pointer and assigned to ptr3
    
    for(int i=0;i<5;i++)
    {
        ptr3[i]=i+1;//initializing the array with help of pointer
    }
    
    for(int i=0;i<5;i++)
    {
        cout<<ptr3[i]<<" ";//printing the array
    }cout<<endl;
    
    delete[] ptr3;//de-allocate memory from heap -->release memory
    //Note: once program ends the heap memory gets automatically deleted.
    //every pointer takes same amount of memory irrespective of the data type which is in x64bit latest compilers is 8bytes (was 4bytes in earlier compilers)
    
    int *p1;
    float *p2;
    char *p3;
    double *p4;
    Rectangle *p5;
    
    cout<<"size of p1: "<<sizeof(p1)<<" bytes"<<endl;
    cout<<"size of p2: "<<sizeof(p2)<<" bytes"<<endl;
    cout<<"size of p3: "<<sizeof(p3)<<" bytes"<<endl;
    cout<<"size of p4: "<<sizeof(p4)<<" bytes"<<endl;
    cout<<"size of p5: "<<sizeof(p5)<<" bytes"<<endl;
    
    return 0;
}
